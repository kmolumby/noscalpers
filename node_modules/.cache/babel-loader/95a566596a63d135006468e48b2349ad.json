{"ast":null,"code":"import _toConsumableArray from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/src/PostsContainer/PostsContainer.jsx\";\nimport React, { Component } from 'react';\nimport CreatePost from './CreatePost/CreatePost';\nimport PostList from './PostsList/PostsList';\nimport { Col, Container, Row } from 'reactstrap';\nimport './PostContainer.css';\nimport Cookie from 'js-cookie';\n\nvar Posts =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Posts, _Component);\n\n  function Posts() {\n    var _this;\n\n    _classCallCheck(this, Posts);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Posts).call(this));\n    _this.getPosts =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var csrfCookie, posts, postsJSON;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              csrfCookie = Cookie.get('csrftoken');\n              _context.next = 3;\n              return fetch('http://localhost:8000/post', {\n                credentials: 'include',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'X-CSRFToken': csrfCookie\n                }\n              });\n\n            case 3:\n              posts = _context.sent;\n              _context.next = 6;\n              return posts.json();\n\n            case 6:\n              postsJSON = _context.sent;\n              return _context.abrupt(\"return\", postsJSON);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.addPost =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(post, e) {\n        var csrfCookie, createdPost, parsedPost;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                e.preventDefault();\n                console.log(post);\n                csrfCookie = Cookie.get('csrftoken');\n                _context2.prev = 3;\n                ;\n                _context2.next = 7;\n                return fetch('http://localhost:8000/post/', {\n                  method: 'POST',\n                  body: JSON.stringify(post),\n                  credentials: 'include',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfCookie\n                  }\n                });\n\n              case 7:\n                createdPost = _context2.sent;\n                _context2.next = 10;\n                return createdPost.json();\n\n              case 10:\n                parsedPost = _context2.sent;\n                console.log(parsedPost, \"<----this is parsed post\");\n                console.log(parsedPost.status, \"<---parsed post status\");\n\n                if (createdPost.status === 200) {\n                  _this.setState({\n                    posts: _toConsumableArray(_this.state.posts).concat([parsedPost.data])\n                  });\n                }\n\n                console.log('getting here');\n                _context2.next = 19;\n                break;\n\n              case 17:\n                _context2.prev = 17;\n                _context2.t0 = _context2[\"catch\"](3);\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 17]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.deletePost =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id) {\n        var csrfCookie, deletedPost, deletedPostJSON;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                csrfCookie = Cookie.get('csrftoken');\n                _context3.next = 4;\n                return fetch('http://localhost:8000/post/' + id, {\n                  method: 'DELETE',\n                  credentials: 'include',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfCookie\n                  }\n                });\n\n              case 4:\n                deletedPost = _context3.sent;\n                _context3.next = 7;\n                return deletedPost.json();\n\n              case 7:\n                deletedPostJSON = _context3.sent;\n\n                _this.setState({\n                  posts: _this.state.posts.filter(function (post) {\n                    return post._id !== id;\n                  })\n                });\n\n                console.log(deletedPostJSON);\n                _context3.next = 14;\n                break;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](0);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 12]]);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.submitEdit =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(postToEdit) {\n        var csrfCookie, editedPost, editedPostJSON, newPostArrayWithEdited;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                csrfCookie = Cookie.get('csrftoken');\n                console.log(postToEdit);\n                _context4.prev = 2;\n                _context4.next = 5;\n                return fetch('http://localhost:8000/post/' + postToEdit._id, {\n                  method: 'PUT',\n                  credentials: 'include',\n                  body: JSON.stringify({\n                    title: postToEdit.title,\n                    commentBody: postToEdit.commentBody\n                  }),\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfCookie\n                  }\n                });\n\n              case 5:\n                editedPost = _context4.sent;\n                _context4.next = 8;\n                return editedPost.json();\n\n              case 8:\n                editedPostJSON = _context4.sent;\n                newPostArrayWithEdited = _this.state.posts.map(function (post) {\n                  if (post._id === editedPostJSON.data._id) {\n                    post = editedPostJSON.data;\n                  }\n\n                  return post;\n                });\n\n                _this.setState({\n                  posts: newPostArrayWithEdited,\n                  modal: false\n                });\n\n                _context4.next = 16;\n                break;\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4[\"catch\"](2);\n                return _context4.abrupt(\"return\", _context4.t0);\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[2, 13]]);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      posts: [],\n      newPost: {\n        \"title\": \"\",\n        \"commentBody\": \"\",\n        \"author\": \"\"\n      }\n    };\n    return _this;\n  } //get Posts from server\n\n\n  _createClass(Posts, [{\n    key: \"componentDidMount\",\n    // Component Did Mount Check\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.getPosts().then(function (posts) {\n        _this2.setState({\n          posts: posts.data\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    } // Add a Post function to be passed down to child\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        className: \"post-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(CreatePost, {\n        username: this.props.username,\n        addPost: this.addPost,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      })), React.createElement(Col, {\n        className: \"post-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Recent Ticket Posts\"), React.createElement(PostList, {\n        username: this.props.username,\n        deletePost: this.deletePost,\n        posts: this.state.posts,\n        submitEdit: this.submitEdit,\n        handleChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Posts;\n}(Component);\n\nexport default Posts;","map":{"version":3,"sources":["/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/src/PostsContainer/PostsContainer.jsx"],"names":["React","Component","CreatePost","PostList","Col","Container","Row","Cookie","Posts","getPosts","csrfCookie","get","fetch","credentials","headers","posts","json","postsJSON","addPost","post","e","preventDefault","console","log","method","body","JSON","stringify","createdPost","parsedPost","status","setState","state","data","deletePost","id","deletedPost","deletedPostJSON","filter","_id","submitEdit","postToEdit","title","commentBody","editedPost","editedPostJSON","newPostArrayWithEdited","map","modal","newPost","then","catch","err","props","username","handleChange"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport CreatePost from './CreatePost/CreatePost';\nimport PostList from './PostsList/PostsList';\nimport { Col, Container, Row} from 'reactstrap';\nimport './PostContainer.css';\nimport Cookie from 'js-cookie'\n\n\nclass Posts extends Component {\n    constructor () {\n        super();\n\n        this.state = {\n            posts: [],\n            newPost: {\n                \"title\": \"\",\n                \"commentBody\": \"\",\n                \"author\": \"\"\n            }\n            \n        }\n    }\n\n    //get Posts from server\n    getPosts = async () => {\n        const csrfCookie = Cookie.get('csrftoken');\n        const posts = await fetch('http://localhost:8000/post', {\n            credentials: 'include', \n            headers: {\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrfCookie\n              }\n          \n        });\n       \n        const postsJSON = await posts.json();\n        return postsJSON\n      }\n\n    // Component Did Mount Check\n      componentDidMount(){\n        this.getPosts().then((posts) => {\n          this.setState({posts: posts.data})\n\n        }).catch((err) => {\n          console.log(err);\n        })\n      }\n\n\n  \n    // Add a Post function to be passed down to child\n\n    addPost = async (post, e) => {\n\n        e.preventDefault();\n        console.log(post);\n\n        const csrfCookie = Cookie.get('csrftoken')\n\n        try {\n;\n              const createdPost = await fetch('http://localhost:8000/post/', {\n              method: 'POST',\n              body: JSON.stringify(post),\n              credentials: 'include',\n              headers: {\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrfCookie\n              }\n\n            });\n            const parsedPost = await createdPost.json();\n\n            console.log(parsedPost, \"<----this is parsed post\")\n            console.log(parsedPost.status, \"<---parsed post status\")\n\n            if(createdPost.status === 200){\n                this.setState({\n                    posts: [...this.state.posts, parsedPost.data]\n                })\n            }\n        \n            console.log('getting here')\n\n          \n        } catch (err) {\n\n        }\n\n    }\n\n\n    // Delete Post function \n    deletePost = async (id) => {\n    \n\n        try {\n            const csrfCookie = Cookie.get('csrftoken');\n            const deletedPost = await fetch('http://localhost:8000/post/' + id, {\n                method: 'DELETE',\n                credentials: 'include',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfCookie\n                  }\n    \n            });\n\n            const deletedPostJSON = await deletedPost.json();\n\n            this.setState({posts: this.state.posts.filter((post)=> post._id !== id)})\n\n            console.log(deletedPostJSON)\n\n        } catch (err) {\n\n        }\n        \n\n    }\n\n\n    // Edit Post \n\n  \n    \n    submitEdit = async (postToEdit) => {\n        const csrfCookie = Cookie.get('csrftoken');\n        console.log(postToEdit)\n            try {\n                const editedPost = await fetch ('http://localhost:8000/post/' + postToEdit._id, {\n                    method: 'PUT', \n                    credentials: 'include',\n\n                    body: JSON.stringify({\n\n                        title: postToEdit.title,\n                        commentBody: postToEdit.commentBody\n\n                    }),\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'X-CSRFToken': csrfCookie\n\n                    }\n                })\n            \n                const editedPostJSON = await editedPost.json();\n        \n                const newPostArrayWithEdited = this.state.posts.map((post) => {\n        \n                if(post._id === editedPostJSON.data._id){\n                    post = editedPostJSON.data\n                }\n        \n                return post\n                });\n                this.setState({\n                    posts: newPostArrayWithEdited,\n                    modal: false\n                        })\n\n            } catch (err) {\n                return err\n            }    \n        }\n    \n    \n    render() {\n\n        return (\n            <Container className=\"post-container\">\n                <Row>\n                    <Col >  \n                      <CreatePost username = {this.props.username} addPost = {this.addPost} />\n                    </Col>\n                    <Col className=\"post-list\"> \n                        <h1>Recent Ticket Posts</h1>\n                        <PostList  username = {this.props.username} deletePost = {this.deletePost} posts={this.state.posts} submitEdit = {this.submitEdit} handleChange = {this.handleChange}/>\n                    </Col>\n\n             </Row>\n                       \n            </Container>\n          \n        )\n\n    }\n\n\n\n}\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}