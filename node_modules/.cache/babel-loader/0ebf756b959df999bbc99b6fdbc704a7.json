{"ast":null,"code":"import _toConsumableArray from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/src/PostsContainer/PostsContainer.jsx\";\nimport React, { Component } from 'react';\nimport CreatePost from './CreatePost/CreatePost';\nimport PostList from './PostsList/PostsList';\nimport { Col, Container, Row } from 'reactstrap';\nimport './PostContainer.css';\nimport Cookie from 'js-cookie';\n\nvar Posts =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Posts, _Component);\n\n  function Posts() {\n    var _this;\n\n    _classCallCheck(this, Posts);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Posts).call(this));\n    _this.getToken =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var token;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('http://localhost:8000/users/getToken', {\n                method: 'get',\n                credentials: 'include',\n                // this sends our session cookie with our request\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 2:\n              token = _context.sent;\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    _this.getPosts =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var csrfCookie, posts, postsJSON;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              csrfCookie = Cookie.get('csrftoken');\n              _context2.next = 3;\n              return fetch('http://localhost:8000/post/', {\n                credentials: 'include',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'X-CSRFToken': csrfCookie\n                }\n              });\n\n            case 3:\n              posts = _context2.sent;\n              _context2.next = 6;\n              return posts.json();\n\n            case 6:\n              postsJSON = _context2.sent;\n              return _context2.abrupt(\"return\", postsJSON);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    _this.addPost =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(post, e) {\n        var csrfCookie, createdPost, parsedPost;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                e.preventDefault();\n                console.log(post);\n                csrfCookie = Cookie.get('csrftoken');\n                _context3.prev = 3;\n                ;\n                _context3.next = 7;\n                return fetch('http://localhost:8000/post/', {\n                  method: 'POST',\n                  body: JSON.stringify(post),\n                  credentials: 'include',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfCookie\n                  }\n                });\n\n              case 7:\n                createdPost = _context3.sent;\n                _context3.next = 10;\n                return createdPost.json();\n\n              case 10:\n                parsedPost = _context3.sent;\n                console.log(parsedPost, \"<----this is parsed post\");\n                console.log(parsedPost.status, \"<---parsed post status\");\n\n                if (createdPost.status === 200) {\n                  _this.setState({\n                    posts: _toConsumableArray(_this.state.posts).concat([parsedPost.data])\n                  });\n                }\n\n                console.log('getting here');\n                _context3.next = 19;\n                break;\n\n              case 17:\n                _context3.prev = 17;\n                _context3.t0 = _context3[\"catch\"](3);\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[3, 17]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.deletePost =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(id) {\n        var csrfCookie, deletedPost, deletedPostJSON;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                csrfCookie = Cookie.get('csrftoken');\n                _context4.prev = 1;\n                _context4.next = 4;\n                return fetch('http://localhost:8000/post/' + id, {\n                  method: 'DELETE',\n                  credentials: 'include',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfCookie\n                  }\n                });\n\n              case 4:\n                deletedPost = _context4.sent;\n                _context4.next = 7;\n                return deletedPost.json();\n\n              case 7:\n                deletedPostJSON = _context4.sent;\n\n                _this.setState({\n                  posts: _this.state.posts.filter(function (post) {\n                    return post.id !== id;\n                  })\n                });\n\n                console.log(deletedPostJSON);\n                _context4.next = 15;\n                break;\n\n              case 12:\n                _context4.prev = 12;\n                _context4.t0 = _context4[\"catch\"](1);\n                console.log(_context4.t0);\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 12]]);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.submitEdit =\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(postToEdit) {\n        var csrfCookie, editedPost, editedPostJSON, newPostArrayWithEdited;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                csrfCookie = Cookie.get('csrftoken');\n                console.log(postToEdit);\n                _context5.prev = 2;\n                _context5.next = 5;\n                return fetch('http://localhost:8000/post/' + postToEdit.id + \"/\", {\n                  method: 'PUT',\n                  credentials: 'include',\n                  body: JSON.stringify({\n                    title: postToEdit.title,\n                    commentBody: postToEdit.commentBody\n                  }),\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfCookie\n                  }\n                });\n\n              case 5:\n                editedPost = _context5.sent;\n                _context5.next = 8;\n                return editedPost.json();\n\n              case 8:\n                editedPostJSON = _context5.sent;\n                newPostArrayWithEdited = _this.state.posts.map(function (post) {\n                  if (post.id === editedPostJSON.data.id) {\n                    post = editedPostJSON.data;\n                  }\n\n                  return post;\n                  return post;\n                });\n\n                _this.setState({\n                  posts: newPostArrayWithEdited,\n                  modal: false\n                });\n\n                _context5.next = 17;\n                break;\n\n              case 13:\n                _context5.prev = 13;\n                _context5.t0 = _context5[\"catch\"](2);\n                console.log(_context5.t0);\n                return _context5.abrupt(\"return\", _context5.t0);\n\n              case 17:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[2, 13]]);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      posts: [] // newPost: {\n      //     \"title\": \"\",\n      //     \"commentBody\": \"\",\n      //     \"author\": \"\"\n      // }\n\n    };\n    return _this;\n  }\n\n  _createClass(Posts, [{\n    key: \"componentDidMount\",\n    // Component Did Mount Check\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.getToken();\n      console.log('GOT TOKEN********');\n      this.getPosts().then(function (posts) {\n        _this2.setState({\n          posts: posts.data\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    } // Add a Post function to be passed down to child\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        className: \"post-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(CreatePost, {\n        username: this.props.username,\n        addPost: this.addPost,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      })), React.createElement(Col, {\n        className: \"post-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \"Recent Ticket Posts\"), React.createElement(PostList, {\n        username: this.props.username,\n        deletePost: this.deletePost,\n        posts: this.state.posts,\n        submitEdit: this.submitEdit,\n        handleChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Posts;\n}(Component);\n\nexport default Posts;","map":{"version":3,"sources":["/Users/kmolumby/wdi/project3/no-scalpers/no-scalpers-frontend/src/PostsContainer/PostsContainer.jsx"],"names":["React","Component","CreatePost","PostList","Col","Container","Row","Cookie","Posts","getToken","fetch","method","credentials","headers","token","getPosts","csrfCookie","get","posts","json","postsJSON","addPost","post","e","preventDefault","console","log","body","JSON","stringify","createdPost","parsedPost","status","setState","state","data","deletePost","id","deletedPost","deletedPostJSON","filter","submitEdit","postToEdit","title","commentBody","editedPost","editedPostJSON","newPostArrayWithEdited","map","modal","then","catch","err","props","username","handleChange"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport CreatePost from './CreatePost/CreatePost';\nimport PostList from './PostsList/PostsList';\nimport { Col, Container, Row} from 'reactstrap';\nimport './PostContainer.css';\nimport Cookie from 'js-cookie'\n\n\nclass Posts extends Component {\n    constructor () {\n        super();\n\n        this.state = {\n            posts: [],\n            // newPost: {\n            //     \"title\": \"\",\n            //     \"commentBody\": \"\",\n            //     \"author\": \"\"\n            // }\n            \n        }\n    }\n\n    \n\n      getToken = async () => {\n        const token = await fetch('http://localhost:8000/users/getToken', {\n          method: 'get',\n          credentials: 'include', // this sends our session cookie with our request\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n    }\n\n\n    //get Posts from server\n    getPosts = async () => {\n        const csrfCookie = Cookie.get('csrftoken');\n        const posts = await fetch('http://localhost:8000/post/', {\n            credentials: 'include', \n            headers: {\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrfCookie\n              }\n          \n        });\n       \n        const postsJSON = await posts.json();\n        return postsJSON\n      }\n\n    // Component Did Mount Check\n      componentDidMount(){\n          this.getToken()\n        console.log('GOT TOKEN********')\n        this.getPosts().then((posts) => {\n          this.setState({posts: posts.data})\n\n        }).catch((err) => {\n          console.log(err);\n        })\n      }\n\n\n  \n    // Add a Post function to be passed down to child\n\n    addPost = async (post, e) => {\n\n        e.preventDefault();\n        console.log(post);\n\n        const csrfCookie = Cookie.get('csrftoken')\n\n        try {\n;\n              const createdPost = await fetch('http://localhost:8000/post/', {\n              method: 'POST',\n              body: JSON.stringify(post),\n              credentials: 'include',\n              headers: {\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrfCookie\n              }\n\n            });\n            const parsedPost = await createdPost.json();\n\n            console.log(parsedPost, \"<----this is parsed post\")\n            console.log(parsedPost.status, \"<---parsed post status\")\n\n            if(createdPost.status === 200){\n                this.setState({\n                    posts: [...this.state.posts, parsedPost.data]\n                })\n            }\n        \n            console.log('getting here')\n\n          \n        } catch (err) {\n\n        }\n\n    }\n\n\n    // Delete Post function \n    deletePost = async (id) => {\n        const csrfCookie = Cookie.get('csrftoken');\n\n        try {\n          \n            const deletedPost = await fetch('http://localhost:8000/post/' + id, {\n                method: 'DELETE',\n                credentials: 'include',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfCookie\n                  }\n    \n            });\n\n            const deletedPostJSON = await deletedPost.json();\n\n            this.setState({posts: this.state.posts.filter((post)=> post.id !== id)})\n\n            console.log(deletedPostJSON)\n\n        } catch (err) {\n            console.log(err)\n\n        }\n        \n\n    }\n\n\n    // Edit Post \n\n  \n    \n    submitEdit = async (postToEdit) => {\n        const csrfCookie = Cookie.get('csrftoken');\n        console.log(postToEdit)\n            try {\n                const editedPost = await fetch ('http://localhost:8000/post/' + postToEdit.id +\"/\", {\n                    method: 'PUT', \n                    credentials: 'include',\n\n                    body: JSON.stringify({\n\n                        title: postToEdit.title,\n                        commentBody: postToEdit.commentBody\n\n                    }),\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'X-CSRFToken': csrfCookie\n\n                    }\n                })\n                const editedPostJSON = await editedPost.json();\n        \n                const newPostArrayWithEdited = this.state.posts.map((post) => {\n        \n                if(post.id === editedPostJSON.data.id){\n                    post = editedPostJSON.data\n                }\n        \n                return post\n        \n                return post\n                });\n                this.setState({\n                    posts: newPostArrayWithEdited,\n                    modal: false\n                        })\n\n            } catch (err) {\n                console.log(err)\n                return err\n            }    \n        }\n    \n    \n    render() {\n\n        return (\n            <Container className=\"post-container\">\n                <Row>\n                    <Col >  \n                      <CreatePost username = {this.props.username} addPost = {this.addPost} />\n                    </Col>\n                    <Col className=\"post-list\"> \n                        <h1>Recent Ticket Posts</h1>\n                        <PostList  username = {this.props.username} deletePost = {this.deletePost} posts={this.state.posts} submitEdit = {this.submitEdit} handleChange = {this.handleChange}/>\n                    </Col>\n\n             </Row>\n                       \n            </Container>\n          \n        )\n\n    }\n\n\n\n}\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}